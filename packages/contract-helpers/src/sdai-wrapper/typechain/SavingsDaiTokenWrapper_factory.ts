/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  SavingsDaiTokenWrapper,
  SavingsDaiTokenWrapperInterface,
} from './SavingsDaiTokenWrapper';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'tokenIn',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'tokenOut',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'pool',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'POOL',
    outputs: [
      {
        internalType: 'contract IPool',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'TOKEN_IN',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'TOKEN_OUT',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'getTokenInForTokenOut',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'getTokenOutForTokenIn',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'rescueTokens',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'onBehalfOf',
        type: 'address',
      },
      {
        internalType: 'uint16',
        name: 'referralCode',
        type: 'uint16',
      },
    ],
    name: 'supplyToken',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'onBehalfOf',
        type: 'address',
      },
      {
        internalType: 'uint16',
        name: 'referralCode',
        type: 'uint16',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint8',
            name: 'v',
            type: 'uint8',
          },
          {
            internalType: 'bytes32',
            name: 'r',
            type: 'bytes32',
          },
          {
            internalType: 'bytes32',
            name: 's',
            type: 'bytes32',
          },
        ],
        internalType: 'struct BaseTokenWrapper.PermitSignature',
        name: 'signature',
        type: 'tuple',
      },
    ],
    name: 'supplyTokenWithPermit',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
    ],
    name: 'withdrawToken',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'deadline',
            type: 'uint256',
          },
          {
            internalType: 'uint8',
            name: 'v',
            type: 'uint8',
          },
          {
            internalType: 'bytes32',
            name: 'r',
            type: 'bytes32',
          },
          {
            internalType: 'bytes32',
            name: 's',
            type: 'bytes32',
          },
        ],
        internalType: 'struct BaseTokenWrapper.PermitSignature',
        name: 'signature',
        type: 'tuple',
      },
    ],
    name: 'withdrawTokenWithPermit',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60e06040523480156200001157600080fd5b506040516200174d3803806200174d8339810160408190526200003491620002bb565b600080546001600160a01b031916339081178255604051869286928692869282916000805160206200172d833981519152908290a3506001600160a01b0380851660805283811660a052821660c0526200008e816200018d565b60405163095ea7b360e01b81526001600160a01b038381166004830152600019602483015284169063095ea7b3906044016020604051808303816000875af1158015620000df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000105919062000318565b505060405163095ea7b360e01b81526001600160a01b03878116600483015260001960248301528816935063095ea7b3925060440190506020604051808303816000875af11580156200015c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000182919062000318565b505050505062000343565b6000546001600160a01b03163314620001ed5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620002545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001e4565b600080546040516001600160a01b03808516939216916000805160206200172d83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80516001600160a01b0381168114620002b657600080fd5b919050565b60008060008060808587031215620002d257600080fd5b620002dd856200029e565b9350620002ed602086016200029e565b9250620002fd604086016200029e565b91506200030d606086016200029e565b905092959194509250565b6000602082840312156200032b57600080fd5b815180151581146200033c57600080fd5b9392505050565b60805160a05160c051611352620003db6000396000818161015f0152818161046301528181610525015281816109c50152610bb001526000818160ed01528181610438015281816104fa0152818161072a015281816107bd0152818161098401528181610b7b01528181610e270152610e9f0152600081816101bd01528181610304015281816108dc0152610c9601526113526000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80638da5cb5b1161008c578063f00c202a11610066578063f00c202a146101b8578063f2fde38b146101df578063f823b07b146101f2578063fe6568501461021357600080fd5b80638da5cb5b14610181578063be4b177214610192578063e94875ca146101a557600080fd5b8062ae3bf8146100d35780630392ef94146100e85780631461e2161461012c5780634f4663a11461013f578063715018a6146101525780637535d2461461015a575b600080fd5b6100e66100e1366004610eeb565b610226565b005b61010f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e661013a366004610f1f565b6102ea565b6100e661014d366004610f73565b6102fa565b6100e66103ad565b61010f7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031661010f565b6100e66101a0366004610fc5565b610421565b6100e66101b3366004610ff5565b6104e3565b61010f7f000000000000000000000000000000000000000000000000000000000000000081565b6100e66101ed366004610eeb565b610627565b610205610200366004611034565b610711565b604051908152602001610123565b610205610221366004611034565b6107a4565b6000546001600160a01b031633146102595760405162461bcd60e51b81526004016102509061104d565b60405180910390fd5b6102e761026e6000546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa1580156102b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d69190611082565b6001600160a01b03841691906107f4565b50565b6102f583838361087f565b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d505accf333087853561033e604088016020890161109b565b876040013588606001356040518863ffffffff1660e01b815260040161036a97969594939291906110be565b600060405180830381600087803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b505050506103a784848461087f565b50505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b81526004016102509061104d565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6040516335ea6a7560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa1580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d191906111d7565b610100015190506102f5838383610a27565b6040516335ea6a7560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059391906111d7565b610100015190506001600160a01b03811663d505accf33308786356105be6040890160208a0161109b565b886040013589606001356040518863ffffffff1660e01b81526004016105ea97969594939291906110be565b600060405180830381600087803b15801561060457600080fd5b505af1158015610618573d6000803e3d6000fd5b505050506103a7848483610a27565b6000546001600160a01b031633146106515760405162461bcd60e51b81526004016102509061104d565b6001600160a01b0381166106b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610250565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60405163266d6a8360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634cdad506906024015b602060405180830381865afa15801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e9190611082565b92915050565b60405163ef8b30f760e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ef8b30f79060240161075d565b60405163a9059cbb60e01b8082526001600160a01b0384166004830152602482018390529060008060448382895af1610831573d6000803e3d6000fd5b5061083b84610cbd565b6103a75760405162461bcd60e51b815260206004820152601560248201527423a83b191d103330b4b632b2103a3930b739b332b960591b6044820152606401610250565b600083116108cf5760405162461bcd60e51b815260206004820152601d60248201527f494e53554646494349454e545f414d4f554e545f544f5f535550504c590000006044820152606401610250565b6109046001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086610d66565b600061090f84610e08565b90506000811161096d5760405162461bcd60e51b815260206004820152602360248201527f494e53554646494349454e545f575241505045445f544f4b454e5f524543454960448201526215915160ea1b6064820152608401610250565b60405163617ba03760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052848116604483015261ffff841660648301527f0000000000000000000000000000000000000000000000000000000000000000169063617ba03790608401600060405180830381600087803b158015610a0957600080fd5b505af1158015610a1d573d6000803e3d6000fd5b5050505050505050565b60008311610a775760405162461bcd60e51b815260206004820152601f60248201527f494e53554646494349454e545f414d4f554e545f544f5f5749544844524157006044820152606401610250565b600019831415610aec576040516370a0823160e01b81523360048201526001600160a01b038216906370a0823190602401602060405180830381865afa158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae99190611082565b92505b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6391906112fa565b50604051631a4ca37b60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590523060448301527f000000000000000000000000000000000000000000000000000000000000000016906369328dec906064016020604051808303816000875af1158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190611082565b506000610c2984610e79565b905060008111610c895760405162461bcd60e51b815260206004820152602560248201527f494e53554646494349454e545f554e575241505045445f544f4b454e5f524543604482015264115255915160da1b6064820152608401610250565b6103a76001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684836107f4565b6000610ce3565b62461bcd60e51b60005260206004528060245250806044525060646000fd5b3d8015610d225760208114610d5357610d1d7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f610cc4565b610d60565b823b610d4a57610d4a7311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014610cc4565b60019150610d60565b3d6000803e600051151591505b50919050565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af1610dab573d6000803e3d6000fd5b50610db585610cbd565b610e015760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610250565b5050505050565b604051636e553f6560e01b8152600481018290523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044015b6020604051808303816000875af115801561077a573d6000803e3d6000fd5b604051635d043b2960e11b815260048101829052306024820181905260448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ba08765290606401610e5a565b6001600160a01b03811681146102e757600080fd5b600060208284031215610efd57600080fd5b8135610f0881610ed6565b9392505050565b61ffff811681146102e757600080fd5b600080600060608486031215610f3457600080fd5b833592506020840135610f4681610ed6565b91506040840135610f5681610f0f565b809150509250925092565b600060808284031215610d6057600080fd5b60008060008060e08587031215610f8957600080fd5b843593506020850135610f9b81610ed6565b92506040850135610fab81610f0f565b9150610fba8660608701610f61565b905092959194509250565b60008060408385031215610fd857600080fd5b823591506020830135610fea81610ed6565b809150509250929050565b600080600060c0848603121561100a57600080fd5b83359250602084013561101c81610ed6565b915061102b8560408601610f61565b90509250925092565b60006020828403121561104657600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561109457600080fd5b5051919050565b6000602082840312156110ad57600080fd5b813560ff81168114610f0857600080fd5b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6040516101e0810167ffffffffffffffff8111828210171561113157634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561114957600080fd5b6040516020810181811067ffffffffffffffff8211171561117a57634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff811681146111a757600080fd5b919050565b805164ffffffffff811681146111a757600080fd5b80516111a781610f0f565b80516111a781610ed6565b60006101e082840312156111ea57600080fd5b6111f26110ff565b6111fc8484611137565b815261120a60208401611187565b602082015261121b60408401611187565b604082015261122c60608401611187565b606082015261123d60808401611187565b608082015261124e60a08401611187565b60a082015261125f60c084016111ac565b60c082015261127060e084016111c1565b60e08201526101006112838185016111cc565b908201526101206112958482016111cc565b908201526101406112a78482016111cc565b908201526101606112b98482016111cc565b908201526101806112cb848201611187565b908201526101a06112dd848201611187565b908201526101c06112ef848201611187565b908201529392505050565b60006020828403121561130c57600080fd5b81518015158114610f0857600080fdfea264697066735822122090c962aecc83de52649c62f483ff77097f4cbcf9263327fa78e149da38db8f2364736f6c634300080a00338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0';

type SavingsDaiTokenWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SavingsDaiTokenWrapperConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SavingsDaiTokenWrapper__factory extends ContractFactory {
  constructor(...args: SavingsDaiTokenWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    tokenIn: string,
    tokenOut: string,
    pool: string,
    owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<SavingsDaiTokenWrapper> {
    return super.deploy(
      tokenIn,
      tokenOut,
      pool,
      owner,
      overrides || {},
    ) as Promise<SavingsDaiTokenWrapper>;
  }
  override getDeployTransaction(
    tokenIn: string,
    tokenOut: string,
    pool: string,
    owner: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(
      tokenIn,
      tokenOut,
      pool,
      owner,
      overrides || {},
    );
  }
  override attach(address: string): SavingsDaiTokenWrapper {
    return super.attach(address) as SavingsDaiTokenWrapper;
  }
  override connect(signer: Signer): SavingsDaiTokenWrapper__factory {
    return super.connect(signer) as SavingsDaiTokenWrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SavingsDaiTokenWrapperInterface {
    return new utils.Interface(_abi) as SavingsDaiTokenWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): SavingsDaiTokenWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as SavingsDaiTokenWrapper;
  }
}
